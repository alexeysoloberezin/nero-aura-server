
const express = require('express');
const cors = require('cors');
const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');
const axios = require('axios')
const nodemailer = require("nodemailer");
const app = express();
const { v4: uuidv4 } = require("uuid");

dotenv.config();

const PORT =  5000;
const API_KEY = process.env.API_KEY

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY // –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø
);

// Middleware
app.use(cors({
  origin: 'https://www.neuro-aura.com',  // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π –¥–æ–º–µ–Ω
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  credentials: true // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å cookies
}));
// app.use(cors('*'));
app.use(express.json());

const transporter = nodemailer.createTransport({
  host: "smtp.mail.ru",
  port: 465, // –ò–ª–∏ 587
  secure: true, // true –¥–ª—è 465, false –¥–ª—è 587
  auth: {
    user: process.env.SMTP_USER, // Email –æ—Ç Mail.ru
    pass: process.env.SMTP_PASS  // –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  }
});

app.post("/reset-password-action", async (req, res) => {
  const { to, token, password, password_repeat } = req.body;

  // üìå 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω—ã –ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  if (!to || !token || !password || !password_repeat) {
      return res.status(400).json({ success: false, error: "–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!" });
  }

  // üìå 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –ø–∞—Ä–æ–ª–∏
  if (password !== password_repeat) {
      return res.status(400).json({ success: false, error: "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!" });
  }

  // üìå 3. –ò—â–µ–º –∑–∞–ø–∏—Å—å —Å email + token –≤ resetPassword
  const { data, error } = await supabase
      .from("resetPassword")
      .select("*")
      .eq("email", to)
      .eq("token", token)
      .single();

  if (error || !data) {
      return res.status(400).json({ success: false, error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ email!" });
  }

  // üìå 4. –ü–æ–ª—É—á–∞–µ–º `id` –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ auth.users
  const { data: users } = await supabase.auth.admin.listUsers();
  const user = users?.users.find(u => u.email === to);

  if (!user) {
      return res.status(400).json({ success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!" });
  }

  // üìå 5. –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ Supabase Auth
  const { error: updateError } = await supabase.auth.admin.updateUserById(user.id, {
      password: password
  });

  if (updateError) {
      return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è!" });
  }

  // üìå 6. –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
  await supabase.from("resetPassword").delete().eq("email", to);

  return res.status(200).json({ success: true, message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!" });
});

app.post("/reset-password", async (req, res) => {
  const { to } = req.body;

  if (!to) {
      return res.status(400).json({ success: false, error: "Email is required" });
  }

  const token = uuidv4(); // üìå –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
  const resetLink = `https://www.neuro-aura.com/app/resetPassword?email=${to}&token=${token}`;

  // üìå 1. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–∫–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
  await supabase.from("resetPassword").delete().eq("email", to);

  // üìå 2. –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –≤ Supabase
  const { error: insertError } = await supabase
      .from("resetPassword")
      .insert([{ email: to, token }]);

  if (insertError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", insertError.message);
      return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞" });
  }

  try {
      // üìå 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å–æ —Å—Å—ã–ª–∫–æ–π
      const info = await transporter.sendMail({
          from: `"Neuro Aura" <${process.env.SMTP_USER}>`,
          to,
          subject: "Neuro Aura: –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è",
          html: `
              <h3>–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h3>
              <p>–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:</p>
              <h2 style="color: #007bff;">
                  <a href="${resetLink}"><strong>–°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å</strong></a>
              </h2>
              <p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –Ω–∞ —Å–∞–π—Ç–µ neuro-aura.com, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
              <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>
          `
      });

      return res.json({ success: true, message: "Email sent!", info });
  } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
      return res.status(500).json({ success: false, error: error.message });
  }
})

app.post("/confirm-email", async (req, res) => {
  const {code, to} = req.body

  if(!code || !to){
    return res.status(500).json({ success: false, error: 'Email or Code is required' });
  }

  try{
    const { data, error } = await supabase
      .from("confirmEmail")
      .select("*")
      .eq("email", to)
      .order("created_at", { ascending: false }) // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç –Ω–æ–≤–æ–π –∫ —Å—Ç–∞—Ä–æ–π
      .limit(1)
      .single()


    if (error || !data) {
      return res.status(400).json({ message: "Code not correct or Email not found" });
    }

    if (data.code === code) {
      const { error: deleteError } = await supabase
        .from("confirmEmail")
        .delete()
        .eq("email", to);

       return res.status(200).json({ message: "Email confirmed!" });
    } else {
      return res.status(400).json({ message: "Not correct code" });
    }
  }catch(error){
    res.status(error.response?.status || 500).json({
      success: false,
      error: error.response?.data || error.message
    });
  }
})

app.post("/send-email", async (req, res) => {
  const { to } = req.body;

  if(!to){
    return res.status(500).json({ success: false, error: 'Email is required' });
  }

  function generateCode() {
    return Math.floor(1000 + Math.random() * 9000);
  }

  const code = generateCode()
  
  const { error: deleteError } = await supabase
        .from("confirmEmail")
        .delete()
        .eq("email", to);

  if (deleteError) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π:", deleteError.message);
      return res.status(500).json({ success: false, error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö –∫–æ–¥–æ–≤" });
  }

  const { data, error } = await supabase
    .from("confirmEmail")
    .insert([
        {
            email: to,
            code: code
        }
    ]);

  if (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:", error.message);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–¥–∞' });
  } 

  try {
    const info = await transporter.sendMail({
      from: `"Neuro Aura" <${process.env.SMTP_USER}>`, // –û—Ç –∫–æ–≥–æ
      to, // –ö–æ–º—É
      subject: "Nero Aura: –∫–æ–¥", // –¢–µ–º–∞ –ø–∏—Å—å–º–∞
      html: `<h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.</h3>
<p>–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:</p>
<h2 style="color: #007bff;">üî¢ –í–∞—à –∫–æ–¥: <strong>${code}</strong></h2>
<p>–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–∞–π—Ç–µ neuro-aura.com , –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.</p>
<p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</p>` // –¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    });

    return res.json({ success: true, message: "Email sent!", info });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", error);
    return res.status(500).json({ success: false, error: error.message });
  }
});

const authMiddleware = async (req, res, next) => {
  const token = req.headers.authorization?.split(" ")[1]; // –ë–µ—Ä—ë–º —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

  if (!token) {
    return res.status(401).json({ error: "–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞" });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ Supabase
  const { data: user, error } = await supabase.auth.getUser(token);

  if (error || !user) {
    return res.status(401).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω" });
  }

  req.user = user; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å
  next();
};
// üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
app.get('/', (req, res) => {
  res.send('ALL —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.post('/create-invoice', async (req, res) => {
  try {
    const { email, currency, paymentMethod } = req.body
    const { offerId, buyerLanguage } = {
      offerId: 'cbd17b2c-881f-4668-84b2-25612bfbf554',
      buyerLanguage: 'EN'
    }

    let data = { email, offerId, currency, buyerLanguage, paymentMethod }

    const response = await axios.post(
      'https://gate.lava.top/api/v2/invoice',
      data,
      {
        headers: {
          accept: 'application/json',
          'X-Api-Key': API_KEY, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ .env
          'Content-Type': 'application/json'
        }
      }
    );

    res.json({ success: true, data: response.data });
  } catch (error) {
    res.status(error.response?.status || 500).json({
      success: false,
      error: error.response?.data || error.message
    });
  }
});

app.post('/lava-webhook', async  (req, res) => {
  try {
    const webhookData = req.body; // –î–∞–Ω–Ω—ã–µ –æ—Ç Lava.top

    if (webhookData.status === 'completed') {
      const buyer = webhookData.buyer.email

      const { data, error } = await supabase
        .from('profiles')
        .update({ hasSub: true })
        .eq('email', buyer)
        .select()

      if (error) throw error;
    } else if (webhookData.status === 'failed') {
      console.log(`‚ùå –ü–ª–∞—Ç–µ–∂ ${webhookData.contractId} –Ω–µ –ø—Ä–æ—à–µ–ª.`);
    }
    res.status(200).json({ success: true, message: 'Webhook received' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞:', error);
    res.status(500).json({ success: false, message: 'Internal server error' });
  }
});

app.get('/get-products', async (req, res) => {
  console.log('get prods')
  try {
    const response = await axios.get(
      'https://gate.lava.top/api/v2/products',
      {
        headers: {
          accept: 'application/json',
          'X-Api-Key': API_KEY, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª—é—á –∏–∑ .env
          'Content-Type': 'application/json'
        }
      }
    );

    res.json({ success: true, data: response.data });
  } catch (error) {
    res.status(error.response?.status || 500).json({
      success: false,
      error: error.response?.data || error.message
    });
  }
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`Server is running on http://localhost:${PORT}`);
  console.log('API_KEY:', API_KEY)
});
